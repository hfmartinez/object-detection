version: "3.1"

services:
  apigateway:
    container_name: apigateway_api
    hostname: api_gateway-service
    profiles: [dev, backend]
    pull_policy: always
    restart: always
    image: hfmartinez/object_detection:api_gateway
    platform: linux/amd64
    build:
      context: ./microservices/api_gateway
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.api_gateway.app:app --port=4500 --host=0.0.0.0"
    ports:
      - "127.0.0.1:8000:4500"
    env_file:
      - ./microservices/api_gateway/.env.dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      vpcbr:
        ipv4_address: 10.5.0.10
  object-detection:
    container_name: object_detection_api
    hostname: object-detection-service
    profiles: [dev, backend]
    pull_policy: always
    restart: always
    image: hfmartinez/object_detection:object-detection 
    platform: linux/amd64
    build:
      context: ./microservices/object_detection
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.object_detection.app:app --port=6000 --host=0.0.0.0"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./microservices/object_detection/.env.dev
    networks:
      vpcbr:
        ipv4_address: 10.5.0.11
  reports:
    container_name: reports_api
    hostname: reports-service
    profiles: [dev, backend]
    pull_policy: always
    restart: always
    image: hfmartinez/object_detection:reports
    platform: linux/amd64
    build:
      context: ./microservices/reports
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.reports.app:app --port=7000 --host=0.0.0.0"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./microservices/reports/.env.dev
    networks:
      vpcbr:
        ipv4_address: 10.5.0.12
  client:
    container_name: object-detection-client
    hostname: object-detection-client
    image: hfmartinez/object_detection:client
    platform: linux/amd64
    profiles: [dev, frontend]
    pull_policy: always
    build:
      context: ./client/
    ports:
      - "127.0.0.1:8080:80"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.13
  db-migration:
    container_name: db_migration
    hostname: db-migration
    profiles: [migration]
    pull_policy: always
    restart: no
    image: hfmartinez/object_detection:migration
    platform: linux/amd64
    build:
      context: ./alembic
      dockerfile: ./Dockerfile
    command: bash -c "alembic upgrade head"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./alembic/.env.dev
    networks:
      vpcbr:
        ipv4_address: 10.5.0.14
  db:
    image: postgres:14.0
    restart: always
    hostname: object_detection_db
    profiles: [dev, db, migration]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: object-detection
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      vpcbr:
        ipv4_address: 10.5.0.5

  db-test:
    image: postgres:14.0
    profiles: [test]
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: object-detection-test
    networks:
      vpcbr:
        ipv4_address: 10.5.0.6
  redis-cache:
    image: redis:alpine
    profiles: [dev, db]
    hostname: redis-cache
    container_name: redis-cache
    restart: on-failure
    command: redis-server
    volumes:
      - cache:/data
    networks:
      vpcbr:
        ipv4_address: 10.5.0.7
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: elasticsearch
    profiles: [log]
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    # ports:
    #   - 9200:9200
    #   - 9300:9300
    networks:
      vpcbr:
        ipv4_address: 10.5.0.8
  
  kibana:
    container_name: kibana
    profiles: [log]
    image: docker.elastic.co/kibana/kibana:7.4.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://10.5.0.8:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      vpcbr:
        ipv4_address: 10.5.0.9
  
  logstash:
    image: logstash:7.16.1
    container_name: logstash
    profiles: [log]
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./logstash/pipeline/kafka-elastic-pipeline.config:/usr/share/logstash/pipeline/kafka-elastic-pipeline.config
      - ./logstash/object-detection.log:/home/object-detection.log
    # ports:
    #   - "5000:5000/tcp"
    #   - "5000:5000/udp"
    #   - "5044:5044"
    #   - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      vpcbr:
        ipv4_address: 10.5.0.2
    command: logstash -f /usr/share/logstash/pipeline/kafka-elastic-pipeline.config

  zookeeper:
    image: zookeeper
    restart: always
    profiles: [log]
    container_name: zookeeper
    hostname: zookeeper
    # ports:
    #   - 2181:2181
    environment :
      ZOO_MY_ID: 1
    networks:
      vpcbr:
        ipv4_address: 10.5.0.4

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    profiles: [log]
    # ports:
    #   - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 10.5.0.3
      KAFKA_ZOOKEEPER_CONNECT: 10.5.0.4:2181
    networks:
      vpcbr:
        ipv4_address: 10.5.0.3

  kafka_manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kakfa-manager
    profiles: [log]
    restart: always
    ports:
      - "9000:9000"
    depends_on:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: "10.5.0.4:2181"
      APPLICATION_SECRET: "random-secret"
      command: -Dpidfile.path=/dev/null
    networks:
      vpcbr:
        ipv4_address: 10.5.0.15

volumes:
  cache:
    driver: local
  postgres-data:
  elasticsearch-data-volume:
    driver: local
networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1

version: "3.1"

services:
  apigateway:
    container_name: apigateway_api
    hostname: api_gateway-service
    profiles: [dev]
    restart: always
    image: hfmartinez/object_detection:api_gateway
    build:
      context: ./microservices/api_gateway
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.api_gateway.app:app --port=4500 --host=0.0.0.0"
    ports:
      - "127.0.0.1:8000:4500"
    env_file:
      - ./microservices/api_gateway/.env.dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      vpcbr:
        ipv4_address: 10.5.0.10
  object-detection:
    container_name: object_detection_api
    hostname: object-detection-service
    profiles: [dev]
    restart: always
    image: hfmartinez/object_detection:object-detection
    build:
      context: ./microservices/object_detection
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.object_detection.app:app --port=6000 --host=0.0.0.0"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./microservices/object_detection/.env.dev
    networks:
      vpcbr:
        ipv4_address: 10.5.0.11
  reports:
    container_name: reports_api
    hostname: reports-service
    profiles: [dev]
    restart: always
    image: hfmartinez/object_detection:reports
    build:
      context: ./microservices/reports
      dockerfile: ./Dockerfile
    command: bash -c "uvicorn microservices.reports.app:app --port=7000 --host=0.0.0.0"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./microservices/reports/.env.dev
    networks:
      vpcbr:
        ipv4_address: 10.5.0.12
  client:
    container_name: object-detection-client
    hostname: object-detection-client
    image: hfmartinez/object_detection:client
    build:
      context: ./client/
    ports:
      - "127.0.0.1:8080:80"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.13
  db:
    image: postgres:14.0
    restart: always
    hostname: object_detection_db
    profiles: [dev]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: object-detection
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      vpcbr:
        ipv4_address: 10.5.0.5

  db-test:
    image: postgres:14.0
    profiles: [test]
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: object-detection-test
    networks:
      vpcbr:
        ipv4_address: 10.5.0.6

volumes:
  postgres-data:
networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
